{
  "name": "markdown-text",
  "type": "components:ui",
  "files": [
    {
      "name": "assistant-ui/markdown-text.tsx",
      "content": "\"use client\";\n\nimport {\n  CodeHeaderProps,\n  MarkdownTextPrimitive,\n  useIsMarkdownCodeBlock,\n} from \"@assistant-ui/react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeKatex from \"rehype-katex\";\nimport remarkMath from \"remark-math\";\nimport { FC, memo, useState } from \"react\";\nimport { CheckIcon, CopyIcon } from \"lucide-react\";\n\nimport { TooltipIconButton } from \"@/components/ui/assistant-ui/tooltip-icon-button\";\nimport { SyntaxHighlighter } from \"@/components/ui/assistant-ui/syntax-highlighter\";\nimport { cn } from \"@/lib/utils\";\n\nimport \"katex/dist/katex.min.css\";\n\nconst MarkdownTextImpl = () => {\n  return (\n    <MarkdownTextPrimitive\n      remarkPlugins={[remarkGfm, remarkMath]}\n      rehypePlugins={[rehypeKatex]}\n      components={{\n        h1: ({ node, className, ...props }) => (\n          <h1\n            className={cn(\n              \"mb-8 scroll-m-20 text-4xl font-extrabold tracking-tight last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h2: ({ node, className, ...props }) => (\n          <h2\n            className={cn(\n              \"mb-4 mt-8 scroll-m-20 text-3xl font-semibold tracking-tight first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h3: ({ node, className, ...props }) => (\n          <h3\n            className={cn(\n              \"mb-4 mt-6 scroll-m-20 text-2xl font-semibold tracking-tight first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h4: ({ node, className, ...props }) => (\n          <h4\n            className={cn(\n              \"mb-4 mt-6 scroll-m-20 text-xl font-semibold tracking-tight first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h5: ({ node, className, ...props }) => (\n          <h5\n            className={cn(\n              \"my-4 text-lg font-semibold first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h6: ({ node, className, ...props }) => (\n          <h6\n            className={cn(\"my-4 font-semibold first:mt-0 last:mb-0\", className)}\n            {...props}\n          />\n        ),\n        p: ({ node, className, ...props }) => (\n          <p\n            className={cn(\n              \"mb-5 mt-5 leading-7 first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        a: ({ node, className, ...props }) => (\n          <a\n            target=\"_blank\"\n            className={cn(\n              \"text-primary font-medium underline underline-offset-4\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        blockquote: ({ node, className, ...props }) => (\n          <blockquote\n            className={cn(\"border-l-2 pl-6 italic\", className)}\n            {...props}\n          />\n        ),\n        ul: ({ node, className, ...props }) => (\n          <ul\n            className={cn(\"my-5 ml-6 list-disc [&>li]:mt-2\", className)}\n            {...props}\n          />\n        ),\n        ol: ({ node, className, ...props }) => (\n          <ol\n            className={cn(\"my-5 ml-6 list-decimal [&>li]:mt-2\", className)}\n            {...props}\n          />\n        ),\n        hr: ({ node, className, ...props }) => (\n          <hr className={cn(\"my-5 border-b\", className)} {...props} />\n        ),\n        table: ({ node, className, ...props }) => (\n          <table\n            className={cn(\n              \"my-5 w-full border-separate border-spacing-0 overflow-y-auto\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        th: ({ node, className, ...props }) => (\n          <th\n            className={cn(\n              \"bg-muted px-4 py-2 text-left font-bold first:rounded-tl-lg last:rounded-tr-lg [&[align=center]]:text-center [&[align=right]]:text-right\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        td: ({ node, className, ...props }) => (\n          <td\n            className={cn(\n              \"border-b border-l px-4 py-2 text-left last:border-r [&[align=center]]:text-center [&[align=right]]:text-right\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        tr: ({ node, className, ...props }) => (\n          <tr\n            className={cn(\n              \"m-0 border-b p-0 first:border-t [&:last-child>td:first-child]:rounded-bl-lg [&:last-child>td:last-child]:rounded-br-lg\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        sup: ({ node, className, ...props }) => (\n          <sup\n            className={cn(\"[&>a]:text-xs [&>a]:no-underline\", className)}\n            {...props}\n          />\n        ),\n        pre: ({ node, className, ...props }) => (\n          <pre\n            className={cn(\n              \"overflow-x-auto rounded-b-lg bg-black p-4 text-white\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        code: function Code({ node, className, ...props }) {\n          const isCodeBlock = useIsMarkdownCodeBlock();\n          return (\n            <code\n              className={cn(\n                !isCodeBlock && \"bg-aui-muted rounded border font-semibold\",\n                className,\n              )}\n              {...props}\n            />\n          );\n        },\n        CodeHeader,\n        SyntaxHighlighter,\n      }}\n    />\n  );\n};\n\nexport const MarkdownText = memo(MarkdownTextImpl);\n\nconst CodeHeader: FC<CodeHeaderProps> = ({ language, code }) => {\n  const { isCopied, copyToClipboard } = useCopyToClipboard();\n  const onCopy = () => {\n    if (!code || isCopied) return;\n    copyToClipboard(code);\n  };\n\n  return (\n    <div className=\"flex items-center justify-between gap-4 rounded-t-lg bg-zinc-900 px-4 py-2 text-sm font-semibold text-white\">\n      <span className=\"lowercase [&>span]:text-xs\">{language}</span>\n      <TooltipIconButton tooltip=\"Copy\" onClick={onCopy}>\n        {!isCopied && <CopyIcon />}\n        {isCopied && <CheckIcon />}\n      </TooltipIconButton>\n    </div>\n  );\n};\n\nconst useCopyToClipboard = ({\n  copiedDuration = 3000,\n}: {\n  copiedDuration?: number;\n} = {}) => {\n  const [isCopied, setIsCopied] = useState<boolean>(false);\n\n  const copyToClipboard = (value: string) => {\n    if (!value) return;\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n      setTimeout(() => setIsCopied(false), copiedDuration);\n    });\n  };\n\n  return { isCopied, copyToClipboard };\n};\n"
    }
  ],
  "registryDependencies": [
    "tooltip-icon-button",
    "syntax-highlighter"
  ],
  "dependencies": [
    "@assistant-ui/react",
    "@assistant-ui/react-markdown",
    "lucide-react",
    "remark-gfm",
    "remark-math",
    "rehype-katex"
  ]
}