{
  "name": "thread-full",
  "type": "components:ui",
  "files": [
    {
      "name": "assistant-ui/thread.tsx",
      "content": "\"use client\";\n\nimport {\n  ActionBarPrimitive,\n  BranchPickerPrimitive,\n  BranchPickerPrimitiveRootProps,\n  ComposerPrimitive,\n  MessagePrimitive,\n  ThreadPrimitive,\n} from \"@assistant-ui/react\";\nimport type { FC } from \"react\";\n\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n  TooltipProvider,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  ArrowDownIcon,\n  CheckIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  CopyIcon,\n  PencilIcon,\n  RefreshCwIcon,\n  SendHorizonalIcon,\n} from \"lucide-react\";\nimport { MarkdownText } from \"@/components/ui/assistant-ui/markdown-text\";\n\nexport const Thread: FC = () => {\n  return (\n    <TooltipProvider>\n      <ThreadPrimitive.Root className=\"bg-background h-full\">\n        <ThreadPrimitive.Viewport className=\"flex h-full flex-col items-center overflow-y-scroll scroll-smooth px-4 pt-8\">\n          <ThreadWelcome />\n\n          <ThreadPrimitive.Messages\n            components={{\n              UserMessage,\n              EditComposer,\n              AssistantMessage,\n            }}\n          />\n\n          <div className=\"sticky bottom-0 mt-4 flex w-full max-w-2xl flex-grow flex-col items-center justify-end rounded-t-lg bg-inherit pb-4\">\n            <ThreadScrollToBottom />\n            <Composer />\n          </div>\n        </ThreadPrimitive.Viewport>\n      </ThreadPrimitive.Root>\n    </TooltipProvider>\n  );\n};\n\nconst ThreadScrollToBottom: FC = () => {\n  return (\n    <ThreadPrimitive.ScrollToBottom asChild>\n      <TooltipIconButton\n        tooltip=\"Scroll to bottom\"\n        variant=\"outline\"\n        className=\"absolute -top-8 rounded-full disabled:invisible\"\n      >\n        <ArrowDownIcon />\n      </TooltipIconButton>\n    </ThreadPrimitive.ScrollToBottom>\n  );\n};\n\nconst ThreadWelcome: FC = () => {\n  return (\n    <ThreadPrimitive.Empty>\n      <div className=\"flex flex-grow basis-full flex-col items-center justify-center\">\n        <Avatar>\n          <AvatarFallback>C</AvatarFallback>\n        </Avatar>\n        <p className=\"mt-4 font-medium\">How can I help you today?</p>\n      </div>\n    </ThreadPrimitive.Empty>\n  );\n};\n\nconst Composer: FC = () => {\n  return (\n    <ComposerPrimitive.Root className=\"relative flex w-full items-end rounded-lg border transition-shadow focus-within:shadow-sm\">\n      <ComposerPrimitive.Input\n        autoFocus\n        placeholder=\"Write a message...\"\n        rows={1}\n        className=\"placeholder:text-muted-foreground size-full max-h-40 resize-none bg-transparent p-4 pr-12 text-sm outline-none\"\n      />\n      <ThreadPrimitive.If running={false}>\n        <ComposerPrimitive.Send asChild>\n          <TooltipIconButton\n            tooltip=\"Send\"\n            variant=\"default\"\n            className=\"absolute bottom-0 right-0 m-2.5 size-8 p-2 transition-opacity\"\n          >\n            <SendHorizonalIcon />\n          </TooltipIconButton>\n        </ComposerPrimitive.Send>\n      </ThreadPrimitive.If>\n      <ThreadPrimitive.If running>\n        <ComposerPrimitive.Cancel asChild>\n          <TooltipIconButton\n            tooltip=\"Cancel\"\n            variant=\"default\"\n            className=\"absolute bottom-0 right-0 m-2.5 size-8 p-2 transition-opacity\"\n          >\n            <CircleStopIcon />\n          </TooltipIconButton>\n        </ComposerPrimitive.Cancel>\n      </ThreadPrimitive.If>\n    </ComposerPrimitive.Root>\n  );\n};\n\nconst UserMessage: FC = () => {\n  return (\n    <MessagePrimitive.Root className=\"grid w-full max-w-2xl auto-rows-auto grid-cols-[minmax(72px,1fr)_auto] gap-y-2 py-4\">\n      <ActionBarPrimitive.Root\n        hideWhenRunning\n        autohide=\"not-last\"\n        className=\"col-start-1 mr-3 mt-2.5 flex flex-col items-end\"\n      >\n        <ActionBarPrimitive.Edit asChild>\n          <TooltipIconButton tooltip=\"Edit\">\n            <PencilIcon />\n          </TooltipIconButton>\n        </ActionBarPrimitive.Edit>\n      </ActionBarPrimitive.Root>\n\n      <div className=\"bg-muted text-foreground col-start-2 row-start-1 max-w-xl break-words rounded-3xl px-5 py-2.5\">\n        <MessagePrimitive.Content />\n      </div>\n\n      <BranchPicker className=\"col-span-full col-start-1 row-start-2 -mr-1 justify-end\" />\n    </MessagePrimitive.Root>\n  );\n};\n\nconst EditComposer: FC = () => {\n  return (\n    <ComposerPrimitive.Root className=\"bg-muted my-4 flex w-full max-w-2xl flex-col gap-2 rounded-xl\">\n      <ComposerPrimitive.Input className=\"text-foreground flex h-8 w-full resize-none bg-transparent p-4 pb-0 outline-none\" />\n\n      <div className=\"mx-3 mb-3 flex items-center justify-center gap-2 self-end\">\n        <ComposerPrimitive.Cancel asChild>\n          <Button variant=\"ghost\">Cancel</Button>\n        </ComposerPrimitive.Cancel>\n        <ComposerPrimitive.Send asChild>\n          <Button>Send</Button>\n        </ComposerPrimitive.Send>\n      </div>\n    </ComposerPrimitive.Root>\n  );\n};\n\nconst AssistantMessage: FC = () => {\n  return (\n    <MessagePrimitive.Root className=\"relative grid w-full max-w-2xl grid-cols-[auto_auto_1fr] grid-rows-[auto_1fr] py-4\">\n      <Avatar className=\"col-start-1 row-span-full row-start-1 mr-4\">\n        <AvatarFallback>A</AvatarFallback>\n      </Avatar>\n\n      <div className=\"text-foreground col-span-2 col-start-2 row-start-1 my-1.5 max-w-xl break-words leading-7\">\n        <MessagePrimitive.Content components={{ Text: MarkdownText }} />\n      </div>\n\n      <BranchPicker className=\"col-start-2 row-start-2 -ml-2 mr-2\" />\n\n      <ActionBarPrimitive.Root\n        hideWhenRunning\n        autohide=\"not-last\"\n        autohideFloat=\"single-branch\"\n        className=\"text-muted-foreground data-[floating]:bg-background col-start-3 row-start-2 -ml-1 flex gap-1 data-[floating]:absolute data-[floating]:rounded-md data-[floating]:border data-[floating]:p-1 data-[floating]:shadow-sm\"\n      >\n        <ActionBarPrimitive.Copy asChild>\n          <TooltipIconButton tooltip=\"Copy\">\n            <MessagePrimitive.If copied>\n              <CheckIcon />\n            </MessagePrimitive.If>\n            <MessagePrimitive.If copied={false}>\n              <CopyIcon />\n            </MessagePrimitive.If>\n          </TooltipIconButton>\n        </ActionBarPrimitive.Copy>\n        <ActionBarPrimitive.Reload asChild>\n          <TooltipIconButton tooltip=\"Refresh\">\n            <RefreshCwIcon />\n          </TooltipIconButton>\n        </ActionBarPrimitive.Reload>\n      </ActionBarPrimitive.Root>\n    </MessagePrimitive.Root>\n  );\n};\n\nconst BranchPicker: FC<BranchPickerPrimitiveRootProps> = ({\n  className,\n  ...rest\n}) => {\n  return (\n    <BranchPickerPrimitive.Root\n      hideWhenSingleBranch\n      className={cn(\n        \"text-muted-foreground inline-flex items-center text-xs\",\n        className,\n      )}\n      {...rest}\n    >\n      <BranchPickerPrimitive.Previous asChild>\n        <TooltipIconButton tooltip=\"Previous\">\n          <ChevronLeftIcon />\n        </TooltipIconButton>\n      </BranchPickerPrimitive.Previous>\n      <span className=\"font-medium\">\n        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />\n      </span>\n      <BranchPickerPrimitive.Next asChild>\n        <TooltipIconButton tooltip=\"Next\">\n          <ChevronRightIcon />\n        </TooltipIconButton>\n      </BranchPickerPrimitive.Next>\n    </BranchPickerPrimitive.Root>\n  );\n};\n\ntype TooltipIconButtonProps = ButtonProps & { tooltip: string };\n\nconst TooltipIconButton: FC<TooltipIconButtonProps> = ({\n  children,\n  tooltip,\n  className,\n  ...rest\n}) => {\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className={cn(\"size-6 p-1\", className)}\n          {...rest}\n        >\n          {children}\n          <span className=\"sr-only\">{tooltip}</span>\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent side=\"bottom\">{tooltip}</TooltipContent>\n    </Tooltip>\n  );\n};\n\nconst CircleStopIcon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 16 16\"\n      fill=\"currentColor\"\n    >\n      <rect width=\"10\" height=\"10\" x=\"3\" y=\"3\" rx=\"2\" />\n    </svg>\n  );\n};\n"
    }
  ],
  "registryDependencies": [
    "markdown-text",
    "button",
    "avatar",
    "tooltip"
  ],
  "dependencies": [
    "@assistant-ui/react",
    "lucide-react"
  ]
}