{
  "name": "markdown-text",
  "type": "components:ui",
  "files": [
    {
      "name": "assistant-ui/markdown-text.tsx",
      "content": "\"use client\";\n\nimport { MarkdownTextPrimitive } from \"@assistant-ui/react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeKatex from \"rehype-katex\";\nimport remarkMath from \"remark-math\";\nimport { memo } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nimport \"katex/dist/katex.min.css\";\n\nconst MarkdownTextImpl = () => {\n  return (\n    <MarkdownTextPrimitive\n      remarkPlugins={[remarkGfm, remarkMath]}\n      rehypePlugins={[rehypeKatex]}\n      components={{\n        h1: ({ node, className, ...props }) => (\n          <h1\n            className={cn(\n              \"mb-8 scroll-m-20 text-4xl font-extrabold tracking-tight last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h2: ({ node, className, ...props }) => (\n          <h2\n            className={cn(\n              \"mb-4 mt-8 scroll-m-20 text-3xl font-semibold tracking-tight first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h3: ({ node, className, ...props }) => (\n          <h3\n            className={cn(\n              \"mb-4 mt-6 scroll-m-20 text-2xl font-semibold tracking-tight first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h4: ({ node, className, ...props }) => (\n          <h4\n            className={cn(\n              \"mb-4 mt-6 scroll-m-20 text-xl font-semibold tracking-tight first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h5: ({ node, className, ...props }) => (\n          <h5\n            className={cn(\n              \"my-4 text-lg font-semibold first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        h6: ({ node, className, ...props }) => (\n          <h6\n            className={cn(\"my-4 font-semibold first:mt-0 last:mb-0\", className)}\n            {...props}\n          />\n        ),\n        p: ({ node, className, ...props }) => (\n          <p\n            className={cn(\n              \"mb-5 mt-5 leading-7 first:mt-0 last:mb-0\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        a: ({ node, className, ...props }) => (\n          <a\n            target=\"_blank\"\n            className={cn(\n              \"text-primary font-medium underline underline-offset-4\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        blockquote: ({ node, className, ...props }) => (\n          <blockquote\n            className={cn(\"border-l-2 pl-6 italic\", className)}\n            {...props}\n          />\n        ),\n        ul: ({ node, className, ...props }) => (\n          <ul\n            className={cn(\"my-5 ml-6 list-disc [&>li]:mt-2\", className)}\n            {...props}\n          />\n        ),\n        ol: ({ node, className, ...props }) => (\n          <ol\n            className={cn(\"my-5 ml-6 list-decimal [&>li]:mt-2\", className)}\n            {...props}\n          />\n        ),\n        hr: ({ node, className, ...props }) => (\n          <hr className={cn(\"my-5 border-b\", className)} {...props} />\n        ),\n        table: ({ node, className, ...props }) => (\n          <table\n            className={cn(\n              \"my-5 w-full border-separate border-spacing-0 overflow-y-auto\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        th: ({ node, className, ...props }) => (\n          <th\n            className={cn(\n              \"bg-muted px-4 py-2 text-left font-bold first:rounded-tl-lg last:rounded-tr-lg [&[align=center]]:text-center [&[align=right]]:text-right\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        td: ({ node, className, ...props }) => (\n          <td\n            className={cn(\n              \"border-b border-l px-4 py-2 text-left last:border-r [&[align=center]]:text-center [&[align=right]]:text-right\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        tr: ({ node, className, ...props }) => (\n          <tr\n            className={cn(\n              \"m-0 border-b p-0 first:border-t [&:last-child>td:first-child]:rounded-bl-lg [&:last-child>td:last-child]:rounded-br-lg\",\n              className,\n            )}\n            {...props}\n          />\n        ),\n        sup: ({ node, className, ...props }) => (\n          <sup\n            className={cn(\"[&>a]:text-xs [&>a]:no-underline\", className)}\n            {...props}\n          />\n        ),\n        code(props) {\n          const { children, className, node, ref, ...rest } = props;\n          const match = /language-(\\w+)/.exec(className || \"\")?.[1];\n          return (\n            <>\n              <div className=\"bg-muted rounded-t-lg px-4 py-2 font-mono text-xs\">\n                <p>{match}</p>\n              </div>\n              <code\n                {...rest}\n                className={cn(\n                  \"overflow-x-auto rounded-b-lg bg-black p-4 text-white\",\n                  className,\n                )}\n              >\n                {children}\n              </code>\n            </>\n          );\n        },\n      }}\n    />\n  );\n};\n\nexport const MarkdownText = memo(MarkdownTextImpl);\n"
    }
  ],
  "dependencies": [
    "@assistant-ui/react",
    "@assistant-ui/react-markdown",
    "remark-gfm",
    "remark-math",
    "rehype-katex"
  ]
}