{
  "name": "unstable-thread-full",
  "type": "components:ui",
  "files": [
    {
      "name": "assistant-ui/thread.tsx",
      "content": "\"use client\";\n\nimport {\n  ActionBarPrimitive,\n  BranchPickerPrimitive,\n  ComposerPrimitive,\n  MessagePrimitive,\n  ThreadPrimitive,\n} from \"@assistant-ui/react\";\nimport type { FC } from \"react\";\n\nimport { MarkdownText } from \"@/components/ui/assistant-ui/markdown-text\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { TooltipProvider } from \"@radix-ui/react-tooltip\";\nimport {\n  ArrowDownIcon,\n  CheckIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  CopyIcon,\n  PencilIcon,\n  RefreshCwIcon,\n  SendHorizonalIcon,\n} from \"lucide-react\";\n\nexport const Thread: FC = () => {\n  return (\n    <TooltipProvider>\n      <ThreadPrimitive.Root className=\"flex h-full flex-col items-center pb-3\">\n        <ThreadPrimitive.Viewport className=\"flex w-full flex-grow flex-col items-center overflow-y-scroll scroll-smooth px-4 pt-12\">\n          <ThreadPrimitive.Empty>\n            <ThreadEmpty />\n          </ThreadPrimitive.Empty>\n\n          <ThreadPrimitive.Messages\n            components={{\n              UserMessage,\n              EditComposer,\n              AssistantMessage,\n            }}\n          />\n\n          <ThreadScrollToBottom />\n        </ThreadPrimitive.Viewport>\n\n        <Composer />\n      </ThreadPrimitive.Root>\n    </TooltipProvider>\n  );\n};\n\nconst ThreadEmpty: FC = () => {\n  return (\n    <div className=\"flex flex-grow flex-col items-center justify-center\">\n      <Avatar>\n        <AvatarFallback>C</AvatarFallback>\n      </Avatar>\n      <p className=\"mt-4 text-xl\">How can I help you today?</p>\n    </div>\n  );\n};\n\nconst ThreadScrollToBottom: FC = () => {\n  return (\n    <div className=\"sticky bottom-0\">\n      <ThreadPrimitive.ScrollToBottom asChild>\n        <IconButton\n          tooltip=\"Scroll to bottom\"\n          variant=\"outline\"\n          className=\"absolute -top-10 rounded-full disabled:invisible\"\n        >\n          <ArrowDownIcon className=\"size-4\" />\n        </IconButton>\n      </ThreadPrimitive.ScrollToBottom>\n    </div>\n  );\n};\n\nconst Composer: FC = () => {\n  return (\n    <ComposerPrimitive.Root className=\"flex w-[calc(100%-32px)] max-w-[42rem] items-end rounded-lg border p-0.5 transition-shadow focus-within:shadow-sm\">\n      <ComposerPrimitive.Input\n        placeholder=\"Write a message...\"\n        className=\"placeholder:text-foreground/50 h-12 max-h-40 flex-grow resize-none bg-transparent p-3.5 text-sm outline-none\"\n      />\n      <ThreadPrimitive.If running={false}>\n        <ComposerPrimitive.Send className=\"bg-foreground m-2 flex h-8 w-8 items-center justify-center rounded-md text-2xl font-bold shadow transition-opacity disabled:opacity-10\">\n          <SendHorizonalIcon className=\"text-background size-4\" />\n        </ComposerPrimitive.Send>\n      </ThreadPrimitive.If>\n      <ThreadPrimitive.If running>\n        <ComposerPrimitive.Cancel className=\"border-foreground m-3.5 flex size-5 items-center justify-center rounded-full border-2\">\n          <div className=\"bg-foreground size-2 rounded-[1px]\" />\n        </ComposerPrimitive.Cancel>\n      </ThreadPrimitive.If>\n    </ComposerPrimitive.Root>\n  );\n};\n\nconst UserMessage: FC = () => {\n  return (\n    <MessagePrimitive.Root className=\"relative flex w-full max-w-2xl gap-3 pb-12\">\n      <Avatar>\n        <AvatarFallback>Y</AvatarFallback>\n      </Avatar>\n\n      <div className=\"flex-grow\">\n        <p className=\"font-semibold\">You</p>\n\n        <p className=\"text-foreground whitespace-pre-line\">\n          <MessagePrimitive.Content />\n        </p>\n\n        <div className=\"flex pt-2\">\n          <BranchPicker />\n\n          <ActionBarPrimitive.Root\n            hideWhenRunning\n            autohide=\"not-last\"\n            autohideFloat=\"single-branch\"\n            className=\"flex items-center gap-1 rounded-lg data-[floating]:absolute data-[floating]:border data-[floating]:p-1\"\n          >\n            <ActionBarPrimitive.Edit asChild>\n              <IconButton tooltip=\"Edit\">\n                <PencilIcon className=\"size-4\" />\n              </IconButton>\n            </ActionBarPrimitive.Edit>\n          </ActionBarPrimitive.Root>\n        </div>\n      </div>\n    </MessagePrimitive.Root>\n  );\n};\n\nconst EditComposer: FC = () => {\n  return (\n    <MessagePrimitive.Root className=\"flex w-full max-w-2xl gap-3 pb-4\">\n      <Avatar>\n        <AvatarFallback>Y</AvatarFallback>\n      </Avatar>\n\n      <div className=\"flex-grow\">\n        <p className=\"font-semibold\">You</p>\n\n        <ComposerPrimitive.Root>\n          <ComposerPrimitive.Input className=\"flex h-8 w-full resize-none bg-transparent outline-none\" />\n\n          <div className=\"mt-1 flex justify-center gap-3\">\n            <ComposerPrimitive.Send asChild>\n              <Button>Save & Submit</Button>\n            </ComposerPrimitive.Send>\n            <ComposerPrimitive.Cancel asChild>\n              <Button variant=\"outline\">Cancel</Button>\n            </ComposerPrimitive.Cancel>\n          </div>\n        </ComposerPrimitive.Root>\n      </div>\n    </MessagePrimitive.Root>\n  );\n};\n\nconst AssistantMessage: FC = () => {\n  return (\n    <MessagePrimitive.Root className=\"relative flex w-full max-w-2xl gap-3 pb-12\">\n      <Avatar>\n        <AvatarFallback>A</AvatarFallback>\n      </Avatar>\n\n      <div className=\"flex-grow\">\n        <p className=\"font-semibold\">Assistant</p>\n\n        <MessagePrimitive.InProgress className=\"bg-foreground inline-block size-3 animate-pulse rounded-full\" />\n        <p className=\"text-foreground whitespace-pre-line\">\n          <MessagePrimitive.Content components={{ Text: MarkdownText }} />\n        </p>\n\n        <div className=\"flex pt-2\">\n          <BranchPicker />\n\n          <ActionBarPrimitive.Root\n            hideWhenRunning\n            autohide=\"not-last\"\n            autohideFloat=\"single-branch\"\n            className=\"flex items-center gap-1 rounded-lg data-[floating]:absolute data-[floating]:border data-[floating]:p-1\"\n          >\n            <ActionBarPrimitive.Copy asChild>\n              <IconButton tooltip=\"Copy\">\n                <MessagePrimitive.If copied>\n                  <CheckIcon className=\"size-4\" />\n                </MessagePrimitive.If>\n                <MessagePrimitive.If copied={false}>\n                  <CopyIcon className=\"size-4\" />\n                </MessagePrimitive.If>\n              </IconButton>\n            </ActionBarPrimitive.Copy>\n            <ActionBarPrimitive.Reload asChild>\n              <IconButton tooltip=\"Refresh\">\n                <RefreshCwIcon className=\"size-4\" />\n              </IconButton>\n            </ActionBarPrimitive.Reload>\n          </ActionBarPrimitive.Root>\n        </div>\n      </div>\n    </MessagePrimitive.Root>\n  );\n};\n\nconst BranchPicker: FC = () => {\n  return (\n    <BranchPickerPrimitive.Root\n      hideWhenSingleBranch\n      className=\"text-foreground/60 inline-flex items-center text-xs\"\n    >\n      <BranchPickerPrimitive.Previous asChild>\n        <IconButton tooltip=\"Previous\">\n          <ChevronLeftIcon className=\"size-4\" />\n        </IconButton>\n      </BranchPickerPrimitive.Previous>\n      <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />\n      <BranchPickerPrimitive.Next asChild>\n        <IconButton tooltip=\"Next\">\n          <ChevronRightIcon className=\"size-4\" />\n        </IconButton>\n      </BranchPickerPrimitive.Next>\n    </BranchPickerPrimitive.Root>\n  );\n};\n\ntype IconButton = ButtonProps & { tooltip: string };\n\nconst IconButton: FC<IconButton> = ({\n  children,\n  tooltip,\n  className,\n  ...rest\n}) => {\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className={cn(\"size-auto p-1\", className)}\n          {...rest}\n        >\n          {children}\n          <span className=\"sr-only\">{tooltip}</span>\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent side=\"bottom\">{tooltip}</TooltipContent>\n    </Tooltip>\n  );\n};\n"
    }
  ],
  "registryDependencies": [
    "unstable-markdown-text",
    "button",
    "avatar",
    "tooltip"
  ],
  "dependencies": [
    "@assistant-ui/react",
    "lucide-react"
  ]
}